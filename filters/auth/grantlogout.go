//
// grantLogout filter
//
// Used for revoking access/refresh tokens generated by the oauthGrant() filter.
//

package auth

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/prometheus/common/log"
	"github.com/zalando/skipper/filters"
)

const (
	GrantLogoutName           = "grantLogout"
	revokeTokenKey            = "token"
	revokeTokenTypeKey        = "token_type_hint"
	refreshTokenType          = "refresh_token"
	accessTokenType           = "access_token"
	unsupportedTokenTypeError = "unsupported_token_type"
)

type grantLogoutSpec struct {
	config OAuthConfig
}

type grantLogoutFilter struct {
	config OAuthConfig
}

type revokeErrorResponse struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

func (grantLogoutSpec) Name() string { return GrantLogoutName }

func (s grantLogoutSpec) CreateFilter([]interface{}) (filters.Filter, error) {
	return grantLogoutFilter(s), nil
}

func (f grantLogoutFilter) basicAuthHeader() (string, error) {
	clientID := f.config.GetClientID()
	if clientID == "" {
		return "", errors.New("failed to create token revoke auth header: no client ID")
	}

	clientSecret := f.config.GetClientSecret()
	if clientSecret == "" {
		return "", errors.New("failed to create token revoke auth header: no client secret")
	}

	credentials := fmt.Sprint(clientID, ":", clientSecret)
	header := fmt.Sprint("Basic ", base64.StdEncoding.EncodeToString([]byte(credentials)))

	return header, nil
}

func (f grantLogoutFilter) getErrorResponse(response *http.Response) *revokeErrorResponse {
	buf, err := ioutil.ReadAll(response.Body)
	if err == nil && buf != nil {
		var errorResponse revokeErrorResponse
		err = json.Unmarshal(buf, &errorResponse)

		if err == nil {
			return &errorResponse
		}
	}

	return nil
}

func (f grantLogoutFilter) revokeTokenType(tokenType string, token string) error {
	revokeURL, err := url.Parse(f.config.RevokeTokenURL)
	if err != nil {
		return err
	}

	query := revokeURL.Query()
	for k, v := range f.config.AuthURLParameters {
		query.Set(k, v)
	}
	revokeURL.RawQuery = query.Encode()

	body := url.Values{}
	body.Add(revokeTokenKey, token)
	body.Add(revokeTokenTypeKey, tokenType)

	revokeRequest, err := http.NewRequest(
		"POST",
		revokeURL.String(),
		strings.NewReader(body.Encode()))

	if err != nil {
		return err
	}

	auth, err := f.basicAuthHeader()
	if err != nil {
		return err
	}

	revokeRequest.Header.Add("Authorization", auth)
	revokeRequest.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	revokeResponse, err := f.config.AuthClient.Do(revokeRequest)
	if err != nil {
		return err
	}
	defer revokeResponse.Body.Close()

	if revokeResponse.StatusCode != 200 {
		errorDescription := ""
		if revokeResponse.StatusCode == 400 {
			errorResponse := f.getErrorResponse(revokeResponse)

			if errorResponse != nil && errorResponse.Error == unsupportedTokenTypeError && tokenType == accessTokenType {
				// Provider does not support revoking access tokens, which can happen according to RFC 7009.
				// In that case this is not really an error.
				return nil
			} else if errorResponse != nil {
				errorDescription = errorResponse.Error + ": " + errorResponse.ErrorDescription
			}
		}

		message := fmt.Sprintf(
			"%s revocation failed: %d %s",
			tokenType,
			revokeResponse.StatusCode,
			errorDescription,
		)
		return errors.New(message)
	}

	return nil
}

// revokeTokens revokes the access and refresh tokens in the grant token cookie.
func (f grantLogoutFilter) revokeTokens(cookie *cookie) error {
	if cookie.AccessToken != "" {
		if err := f.revokeTokenType(accessTokenType, cookie.AccessToken); err != nil {
			return err
		}
	}

	if cookie.RefreshToken != "" {
		if err := f.revokeTokenType(refreshTokenType, cookie.RefreshToken); err != nil {
			return err
		}
	}

	return nil
}

func (f grantLogoutFilter) Request(ctx filters.FilterContext) {
	req := ctx.Request()

	c, err := extractCookie(req, f.config)
	if err != nil || c == nil {
		unauthorized(
			ctx,
			"",
			missingToken,
			req.Host,
			fmt.Sprintf("No token cookie %v in request.", f.config.TokenCookieName))
		return
	}

	if c.AccessToken == "" && c.RefreshToken == "" {
		unauthorized(
			ctx,
			"",
			missingToken,
			req.Host,
			fmt.Sprintf("Token cookie %v has no tokens.", f.config.TokenCookieName))
		return
	}

	err = f.revokeTokens(c)
	if err != nil {
		log.Errorf("Error revoking tokens: %v", err)
		serverError(ctx)
	}
}

func (f grantLogoutFilter) Response(ctx filters.FilterContext) {
	deleteCookie := createDeleteCookie(f.config, ctx.Request().Host)
	ctx.Response().Header.Add("Set-Cookie", deleteCookie.String())
}
